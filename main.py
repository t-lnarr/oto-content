import os
import random
import asyncio
import httpx
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
from flask import Flask
from threading import Thread

# --- Flask Keep Alive ---
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Bot is running and alive!"

def run():
    port = int(os.getenv("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

def keep_alive():
    t = Thread(target=run)
    t.start()


# --- Zaman Dilimi ---
TIMEZONE = pytz.timezone("Asia/Ashgabat")

# --- √áevre Deƒüi≈ükenleri ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # √∂rn: @kanal_adin

# --- Gemini API ile i√ßerik √ºretimi ---
async def generate_post():
    konular = [
        "Python dili", "JavaScript", "HTML we CSS", "Django", "Flask",
        "FastAPI", "API n√§me?", "Pascal ABC", "C++ dili", "C# dili",
        "Programmirleme barada faktlar", "Programmisti≈à bilmeli zatlary",
        "Programmiste gerek zatlar", "Git we GitHub", "Algoritmalar",
        "Database", "√ñ√Ωde edip boljak pro√Ωektlar", "Taslama idealar",
        "√áyl≈üyrymly meseleler", "Pe√Ωdaly programmirleme barada sa√Ωtlar",
        "Programmisty≈à d√ºn√Ω√§si", "Programmirleme n√§me √º√ßin gerek",
        "Programmirleme ugurlary", "Web Programmirleme",
        "SQL ba≈ülangƒ±√ß √º√ßin", "NoSQL bazalar", "Frontend vs Backend",
        "Mobil programmirleme (Flutter, React Native)",
        "Programmistler √º√ßin maslahatlar", "AI we ChatGPT", "Kod n√§me ?",
        "Kod redaktorlary", "Programmirleme barada 5 t√§sin fakt",
        "Kiber howpsuzlyk", "Code review we hatalary tapmak",
        "IDE we gurallar (VSCode, PyCharm)",
        "√ñwrenmek √º√ßin saytlar (w3schools, freecodecamp, Codecademy)"
    ]

    konu = random.choice(konular)
    prompt = f"""
    T√ºrkmen dilinde, {konu} baradaky gysga, gyzykly we bilgilendiriji post √Ωazgy d√∂redip ber.
    Post di≈àe netije h√∂km√ºnde bolsun ‚Äî giri≈ü s√∂zleri bolmasyn.

    D√ºzg√ºnler:
    - Ba≈üynda soragly √Ωa-da tema bilen baglany≈üykly √ßekiji ba≈ülyk bolsun.
    - So≈àra 4‚Äì6 setirlik d√º≈ü√ºndiri≈ü bolsun.
    - Emojiler bolsun.
    - Ahyrynda 2‚Äì3 hashtag we "ü§ñ AI tarapyndan d√∂redildi." bolsun.
    """

    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
            params={"key": GEMINI_API_KEY},
            json={"contents": [{"parts": [{"text": prompt}]}]},
            timeout=30
        )
        data = response.json()
        try:
            return data["candidates"][0]["content"]["parts"][0]["text"]
        except Exception as e:
            return f"√ùal≈ày≈ülyk √Ω√ºze √ßykdy: {e}"


# --- Telegram‚Äôa g√∂nderim ---
async def send_to_telegram(text):
    async with httpx.AsyncClient() as client:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        await client.post(url, json={"chat_id": CHANNEL_USERNAME, "text": text})


# --- G√ºnl√ºk post g√∂revi ---
async def daily_post():
    text = await generate_post()
    await send_to_telegram(text)
    print(f"{datetime.now()}: Post ugradyldy ‚úÖ")


# --- Ana fonksiyon ---
async def main():
    keep_alive()

    scheduler = AsyncIOScheduler()

    # Sabah, √∂ƒüle, ak≈üam zamanlarƒ±nƒ± ayarlƒ±yoruz:
    scheduler.add_job(daily_post, "cron", hour=8, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=12, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=16, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=20, minute=0, timezone=TIMEZONE)

    scheduler.start()
    print("Bot i≈üle√Ω√§r... ‚è∞")
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(main())
