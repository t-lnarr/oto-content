import os
import random
import asyncio
import httpx
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
import base64

TIMEZONE = pytz.timezone("Asia/Ashgabat")  # T√ºrkmenistan saati

# --- Ayarlar ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # √∂rn: @kanal_adin
HF_API_TOKEN = os.getenv("HF_API_TOKEN")


# --- Konular ---
konular = [
    "Python dili", "JavaScript", "HTML we CSS", "Django", "Flask", "FastAPI", "API n√§me?",
    "Pascal ABC", "C++ dili", "C# dili", "Programmirleme barada faktlar", "Random bir dilde random bir kod",
    "Random bir programirleme dili barada", "Random bir programirleme temasy",
    "Programmisti≈à bilmeli zatlary", "Programmiste gerek zatlar", "Git we GitHub",
    "Algoritmalar", "Database", "Pe√Ωdaly programmirleme barada sa√Ωtlar",
    "Programmisty≈à d√ºn√Ω√§si", "Programmirleme n√§me √º√ßin gerek", "Programmirleme ugurlary",
    "Web Programmirleme", "SQL ba≈ülangƒ±√ß √º√ßin", "NoSQL bazalar", "Frontend vs Backend",
    "Mobil programmirleme (Flutter, React Native)", "Programmistler √º√ßin maslahatlar",
    "AI we ChatGPT", "Kiber howpsuzlyk", "Code review we hatalary tapmak",
    "IDE we gurallar (VSCode, PyCharm)", "Programirleme √ñwrenmek √º√ßin saytlar", "Programirleme b√∂l√ºmleri"
]

# --- Gemini ile post √ºretimi ---
async def generate_post():
    konu = random.choice(konular)
    prompt = f"""
    T√ºrkmen dilinde, programmirleme barada gyzyklan√Ωanlara {konu} baradaky gysga, gyzykly we √∂wrediji bir post √Ωazgy d√∂redip ber.
    Post di≈àe netije h√∂km√ºnde bolsun ‚Äî giri≈ü s√∂zleri bolmasyn.
    - Temany≈à ady we esasy √Ωazgy bar bolsun
    - 4‚Äì6 setirlik d√º≈ü√ºndiri≈üli, g√ºlk√ºn√ß, gyzykly we bir zad √∂wrediji mazmun bolsun
    - Gerek bolsa mysallar getirip g√∂rkezde mazmuny ba√Ωla≈üdyr
    - D√º≈ün√ºkli, hat √Ωal≈ày≈üsyz bolsun. Uniwersal s√∂zleri i≈àlis√ße a√ßdyp bilersi≈à.
    - Emojiler bilen bezelen bolsun
    - Ahyrynda tema degi≈üli 2‚Äì3 hashtag (#teknologiya, #python, #web)
    - I≈à so≈àunda "ü§ñ AI tarapyndan d√∂redildi."
    """
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
            params={"key": GEMINI_API_KEY},
            json={"contents": [{"parts": [{"text": prompt}]}]},
            timeout=30
        )
        data = response.json()
        try:
            text = data["candidates"][0]["content"]["parts"][0]["text"]
        except Exception as e:
            text = f"√ùal≈ày≈ülyk √Ω√ºze √ßykdy: {e}"

    return konu, text

# --- Gemini ile konu ƒ∞ngilizce prompta √ßevir ---
async def translate_topic_to_prompt(topic):
    prompt = f"Convert this topic into a short, simple English keyword or phrase suitable for image generation: {topic}"
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
            params={"key": GEMINI_API_KEY},
            json={"contents": [{"parts": [{"text": prompt}]}]},
            timeout=20
        )
        data = response.json()
        try:
            english_prompt = data["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            english_prompt = topic
    # Tek satƒ±r ve √ßok uzun olmasƒ±n diye kƒ±saltƒ±yoruz:
    english_prompt = english_prompt.split("\n")[0].strip()
    if len(english_prompt) > 60:  # 60 karakteri ge√ßmesin
        english_prompt = english_prompt[:60]
    return english_prompt



async def generate_ai_image(prompt):
    async with httpx.AsyncClient() as client:
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        payload = {"inputs": prompt, "options": {"wait_for_model": True}}
        response = await client.post(
            "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0",
            headers=headers,
            json=payload,
            timeout=60
        )

        if response.status_code == 200:
            # Eƒüer direkt bytes geldiyse bunu kullan
            content_type = response.headers.get("content-type", "")
            if "application/json" in content_type:
                data = response.json()
                # Eƒüer JSON i√ßinde "image" alanƒ± varsa base64 decode yap
                image_base64 = data.get("image", None)
                if image_base64:
                    return base64.b64decode(image_base64)
            else:
                # Direct image bytes olarak d√∂n√ºyorsa
                return response.content
        else:
            print(f"Hugging Face API hatasƒ±: {response.status_code}")
        return None


# --- Telegram'a g√∂nderim ---
async def send_to_telegram(text, image_bytes=None):
    async with httpx.AsyncClient() as client:
        if image_bytes:
            # Telegram API'ye file upload i√ßin multipart/form-data gerekiyor
            files = {"photo": ("image.png", image_bytes)}
            data = {"chat_id": CHANNEL_USERNAME, "caption": text}
            await client.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto", data=data, files=files)
        else:
            await client.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                              json={"chat_id": CHANNEL_USERNAME, "text": text})

# --- G√ºnl√ºk g√∂rev ---
async def daily_post():
    konu, text = await generate_post()
    prompt = await translate_topic_to_prompt(konu)

    # Buraya ekliyoruz:
    print(f"G√∂rsel i√ßin kullanƒ±lan prompt: {prompt}")

    image_bytes = await generate_ai_image(prompt)
    await send_to_telegram(text, image_bytes)
    print(f"{datetime.now()}: Post g√∂nderildi ‚úÖ | Tema: {konu}")


# --- Zamanlayƒ±cƒ± ---
async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_post, "cron", hour=6, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=9, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=12, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=15, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=18, minute=0, timezone=TIMEZONE)
    scheduler.add_job(daily_post, "cron", hour=21, minute=0, timezone=TIMEZONE)

    scheduler.start()
    print("Bot √ßalƒ±≈üƒ±yor... ‚è∞")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
