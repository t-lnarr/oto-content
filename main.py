import os
import random
import asyncio
import httpx
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

TIMEZONE = pytz.timezone("Asia/Ashgabat")

# --- Ayarlar ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")

konular = [
    "Python dili", "JavaScript", "HTML we CSS", "Django", "Flask", "FastAPI", 
    "Pascal ABC", "C++ dili", "C# dili", "Algoritmalar", "Database",
    "Web Programmirleme", "AI we ChatGPT", "Kiber howpsuzlyk"
]

# --- Gemini ile post √ºretimi ---
async def generate_post():
    konu = random.choice(konular)
    prompt = f"""
    T√ºrkmen dilinde, programmirleme barada gyzyklan√Ωanlara {konu} baradaky gysga, 
    gyzykly we √∂wrediji bir post √Ωazgy d√∂redip ber.
    Post di≈üe netije h√∂k√ºm√ºnde bolsun ‚Äì giri≈ü s√∂zleri bolmasyn.
    - Temany≈à ady we esasy √Ωazgy bar bolsun
    - 4‚Äì6 setirlik d√º≈ü√ºndiri≈ü, g√ºlk√º√±√ß, gyzykly we bir zat √∂wrediji mazmun bolsun
    - Emojiler bilen bezelen bolsun
    - Ahyrynda tema degi≈üli 2‚Äì3 hashtag (#teknologiya, #python, #web)
    - I≈üi so≈àunda "ü§ñ AI tarapyndan d√∂redildi."
    """
    async with httpx.AsyncClient(timeout=30) as client:
        try:
            response = await client.post(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
                params={"key": GEMINI_API_KEY},
                json={"contents": [{"parts": [{"text": prompt}]}]},
            )
            data = response.json()
            text = data["candidates"][0]["content"]["parts"][0]["text"]
        except Exception as e:
            print(f"Gemini hatasƒ±: {e}")
            text = f"Hata √Ω√ºze √ßykdy: {e}"
    
    return konu, text

# --- Topic'i ingilizceye √ßevir ---
async def translate_topic_to_prompt(topic):
    prompt = f"Convert this topic into a short, simple English keyword (max 10 words): {topic}"
    async with httpx.AsyncClient(timeout=20) as client:
        try:
            response = await client.post(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
                params={"key": GEMINI_API_KEY},
                json={"contents": [{"parts": [{"text": prompt}]}]},
            )
            data = response.json()
            english_prompt = data["candidates"][0]["content"]["parts"][0]["text"]
            english_prompt = english_prompt.split("\n")[0].strip()[:60]
            return english_prompt
        except Exception as e:
            print(f"Translation hatasƒ±: {e}")
            return topic

# --- AI g√∂rsel √ºretimi (D√úZELTILMI≈û) ---
async def generate_ai_image(prompt):
    """
    Hugging Face API'den g√∂rsel √ºretiyor.
    Direkt bytes d√∂nd√ºr√ºyor, base64 deƒüil!
    """
    print(f"G√∂rsel √ºretiliyor: {prompt}")
    
    async with httpx.AsyncClient(timeout=120) as client:
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        payload = {"inputs": prompt}
        
        try:
            response = await client.post(
                "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0",
                headers=headers,
                json=payload,
            )
            
            print(f"HF Status Code: {response.status_code}")
            
            # 402 = Quota a≈üƒ±lmƒ±≈ü, 503 = Model loading, 200 = Ba≈üarƒ±
            if response.status_code == 200:
                # Hugging Face direkt image bytes d√∂nd√ºr√ºyor
                return response.content
            elif response.status_code == 503:
                print("Model y√ºkleniyor, l√ºtfen bekleyin...")
                return None
            elif response.status_code == 402:
                print("‚ö†Ô∏è Hugging Face API Quote A≈ûILMI≈û veya √ñdeme Gerekli!")
                print(f"Response: {response.text}")
                return None
            else:
                print(f"API Hatasƒ±: {response.status_code} - {response.text[:200]}")
                return None
                
        except asyncio.TimeoutError:
            print("Timeout: G√∂rsel √ºretimi √ßok uzun s√ºrd√º")
            return None
        except Exception as e:
            print(f"G√∂rsel √ºretim hatasƒ±: {e}")
            return None

# --- Telegram'a g√∂nderim ---
async def send_to_telegram(text, image_bytes=None):
    async with httpx.AsyncClient(timeout=30) as client:
        try:
            if image_bytes:
                # G√∂rsel varsa photo olarak g√∂nder
                files = {"photo": ("image.png", image_bytes, "image/png")}
                data = {"chat_id": CHANNEL_USERNAME, "caption": text}
                response = await client.post(
                    f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto",
                    data=data,
                    files=files
                )
                print(f"Telegram Photo: {response.status_code}")
            else:
                # G√∂rsel yoksa sadece metin g√∂nder
                response = await client.post(
                    f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                    json={"chat_id": CHANNEL_USERNAME, "text": text}
                )
                print(f"Telegram Message: {response.status_code}")
        except Exception as e:
            print(f"Telegram g√∂nderim hatasƒ±: {e}")

# --- G√ºnl√ºk g√∂rev ---
async def daily_post():
    try:
        print(f"\nüìù Post √ºretiliyor... ({datetime.now()})")
        
        konu, text = await generate_post()
        prompt = await translate_topic_to_prompt(konu)
        
        print(f"Konu: {konu}")
        print(f"ƒ∞ngilizce Prompt: {prompt}")
        
        # G√∂rsel √ºret (hata olsa da devam et)
        image_bytes = await generate_ai_image(prompt)
        
        # Telegram'a g√∂nder
        await send_to_telegram(text, image_bytes)
        
        print(f"‚úÖ Post g√∂nderildi! | Tema: {konu}")
        
    except Exception as e:
        print(f"‚ùå Daily post hatasƒ±: {e}")

# --- Zamanlayƒ±cƒ± ---
async def main():
    scheduler = AsyncIOScheduler()
    
    # 7 kez g√ºnde post g√∂nder
    hours = [6, 9, 12, 15, 18, 21, 23]
    for hour in hours:
        scheduler.add_job(daily_post, "cron", hour=hour, minute=0, timezone=TIMEZONE)
    
    scheduler.start()
    print("ü§ñ Bot √ßalƒ±≈üƒ±yor...")
    
    try:
        while True:
            await asyncio.sleep(3600)
    except KeyboardInterrupt:
        print("Bot durduruldu")
        scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
